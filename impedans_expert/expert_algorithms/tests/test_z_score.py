import json
import numpy
from django.test import TestCase

from impedans_expert.expert_algorithms.algorithms.z_score import *
from impedans_expert.expert_algorithms.models import *
from impedans_expert.expert_algorithms.algorithms.training_z import do_training

class Test_Z_Score(TestCase):

    def setUp(self):
        # for testing the overall algorithm with empty and populated states
        self.test_non_state_data_set = [
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [37.9201431274, 1.05172220036, 58.2153259261, 0.275705803098, 0.0222346243175, -112.023022888],
                            [37.8221282959, 1.05923110775, 58.5795127815, 0.359793923886, 0.0226113365445, -79.1247027742],
                            [37.8628349304, 1.06648601197, 58.6042258026, 0.410400491053, 0.0241089276299, -101.148802531],
                            [37.8591384888, 1.06865608533, 58.5973725392, 0.192185382536, 0.0238185354303, -87.2902504406],
                            [37.8413963318, 1.0690938364, 59.1859042378, 0.419897911238, 0.0242461878171, -81.4700980624],
                            [38.0127182007, 1.06817105022, 58.8820795597, 0.341363493118, 0.0229937691069, -91.5614846946],
                            [37.8904571533, 1.06565798493, 58.813714205, 0.265149050885, 0.0238181773839, -122.356237345],
                            [37.9252510071, 1.06037336885, 58.4431587482, 0.343170428748, 0.0224115942755, -90.7197945051],
                            [37.9400558472, 1.05074935954, 58.3443802986, 0.257176216309, 0.0216002490535, -100.901934378]
                        ]

        self.test_state_data_set = [
                            [37.8628349304, 1.06648601197, 58.6042258026, 0.410400491053, 0.0241089276299, -101.148802531],
                            [37.8591384888, 1.06865608533, 58.5973725392, 0.192185382536, 0.0238185354303, -87.2902504406],
                            [37.8413963318, 1.0690938364, 59.1859042378, 0.419897911238, 0.0242461878171, -81.4700980624],
                            [38.0127182007, 1.06817105022, 58.8820795597, 0.341363493118, 0.0229937691069, -91.5614846946],
                            [37.8904571533, 1.06565798493, 58.813714205, 0.265149050885, 0.0238181773839, -122.356237345],
                            [37.9252510071, 1.06037336885, 58.4431587482, 0.343170428748, 0.0224115942755, -90.7197945051],
                            [37.9400558472, 1.05074935954, 58.3443802986, 0.257176216309, 0.0216002490535, -100.901934378]
                        ]

        empty_state = [5, 6]
        self.empty_state = json.dumps(empty_state)

        populated_state = [
                           [
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [37.9201431274, 1.05172220036, 58.2153259261, 0.275705803098, 0.0222346243175, -112.023022888],
                            [37.8221282959, 1.05923110775, 58.5795127815, 0.359793923886, 0.0226113365445, -79.1247027742]
                           ],
                           [
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [38.03919792175, 1.048581083165, 58.10880728305, 0.283478903951, 0.02158187879785, -96.92295990950001],
                            [37.9201431274, 1.05172220036, 58.2153259261, 0.291252004804, 0.0222346243175, -81.822896931],
                           ],
                           [
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [38.03919792175, 1.048581083165, 58.10880728305, 0.283478903951, 0.02158187879785, -96.92295990950001],
                            [38.03919792175, 1.048581083165, 58.10880728305, 0.283478903951, 0.02158187879785, -96.92295990950001],
                            [37.9201431274, 1.05172220036, 58.2153259261, 0.291252004804, 0.0222346243175, -81.822896931],
                           ],
                           [
                            [38.1582527161, 1.04543996597, 58.00228864, 0.291252004804, 0.0209291332782, -81.822896931],
                            [38.098725318925005, 1.0470105245674999, 58.055547961525, 0.2873654543775, 0.021255506038025, -89.37292842025],
                            [38.03919792175, 1.048581083165, 58.10880728305, 0.2886609711863333, 0.021581878797849997, -86.85625125716668],
                           ],
                           [
                            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                            [0.06873631756628765, 0.0018135248580894048, 0.061498567238628225, 0.004487801869917649, 0.00037686280148224954, 8.71802542541728],
                            [0.09960838739987934, 0.0026280471957153303, 0.08911989072058502, 0.0042575026789507375, 0.0005461260837903678, 8.2706451130731],
                           ],
                           [
                            [0, 0, 0, 0, 0, 0],
                            [0, 0, 0, 0, 0, 0],
                            [-2.5980762113533675, 2.5980762113533773, 2.5980762113534315, 0.8660254037844386, 2.598076211353316, 0.8660254037844386],
                           ],
                           [0.0, 0.0, 2.1794494717703823],
                           [114.11759376525, 3.1457432494949997, 174.32642184915, 0.865982913559, 0.06474563639355, -260.56875377150004],
                           [3, 3, 3, 3, 3, 3],
                           [3, 5, 6]
                          ]

        self.populated_state = json.dumps(populated_state)

        self.expected_z_scores = [0.0, 0.0, 2.1794494717703823, 4.025329164681944, 1.6240290287639045, 1.5882417777586655, 1.6685133353631223,
                                  1.3109220669409025, 0.993419541110181, 0.6889118408489987]
        # -----------------------------------------------------------------
        # --- for the mean calculation
        self.sum = [400]
        self.num = [100]
        # ----------------------------
        # --- for the standard deviation calculation
        self.sample_clean_medians =  [
                                         [38.1582527161],[38.1582527161],[38.03919792175],[38.03919792175],[37.9201431274],
                                         [37.8914890289],[37.8628349304],[37.8609867096],[37.8609867096],[37.8609867096],
                                         [37.876646041849995],[37.907854080199996]
                                     ]
        self.expected_standard_deviation = 0.1149615716004866
        # ------------------------------------------
        # --- for the median calculation
        self.median_test_data_set = [[1],[2],[3],[4],[5]]
        self.median_test_data_set = numpy.array(self.median_test_data_set)
        self.row_num = 4
        self.column = 0
        self.median_result = 3
        self.current_medians = []
        # ------------------------------
        # testing z_score calculation
        self.test_sigma_values = [-1.4828961366177495, 2.6238383013982078, 3.2384697559255597, 8.6581256521373042, 1.5401235321198545, -0.5597626800012846]
        self.expected_z_score = 4.025329164681944
        # ---------------------------


    def test_z_scores_empty_state(self):
        results = do_z_score(self.test_non_state_data_set, self.empty_state)
        self.assertEquals(results[0], self.expected_z_scores)


    def test_z_scores_populated_state(self):
        results = do_z_score(self.test_state_data_set, self.populated_state)
        self.assertEquals(results[0], self.expected_z_scores)


    def test_calculate_median(self):
        results = calculate_median(self.median_test_data_set, self.row_num, self.column, self.current_medians, 5)
        self.assertEquals(results[0], self.median_result)


    def test_calculate_mean(self):
        results = calculate_mean(self.sum, self.num)
        self.assertEquals(results[0], 4)


    def test_calculate_standard_deviation(self):
        results = calculate_standard_deviation(self.sample_clean_medians)
        self.assertEquals(results[0], self.expected_standard_deviation)


    def test_calculate_sigma(self):
        results = calculate_sigmas([37.9201431274], [38.0987253189], [0.0687363175663])
        self.assertEquals(results[0], -2.598076210989134)

    def test_calculate_z_score(self):
        result = calculate_z_score(self.test_sigma_values)
        self.assertEquals(result, self.expected_z_score)

    def test_training_z(self):
        result = do_training([[1,2,3,4,5],[1,2,3,4,5]], [])
        print(result)
        self.assertEquals(result[0][1][0], 0)
