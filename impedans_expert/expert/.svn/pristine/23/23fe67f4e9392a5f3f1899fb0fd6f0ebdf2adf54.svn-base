from django import forms

from datetime import (
    datetime,
    timezone
)

from django.forms import (
    ModelForm,
    CharField,
    DateTimeField,
    ModelChoiceField,
    ModelMultipleChoiceField
)

from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

from crispy_forms.bootstrap import (
    AppendedText,
    FormActions,
    PrependedText
)

from crispy_forms.helper import FormHelper

from crispy_forms.layout import *

from .models import *
from impedans_expert.expert_upload.models import FileUploadModel as UploadedFile
from impedans_expert.expert_import.models import Run, RunProperty
from impedans_expert.expert_algorithms.models import AlgorithmSettings

from django_fine_uploader.forms import FineUploaderUploadForm
from django_fine_uploader.forms import FineUploaderUploadSuccessForm

class SignUpForm(UserCreationForm):
    first_name = forms.CharField(max_length=30, required=False, help_text='Optional.')
    last_name = forms.CharField(max_length=30, required=False, help_text='Optional.')
    email = forms.EmailField(max_length=254, help_text='Required. Inform a valid email address.')
    company_name = forms.CharField(max_length=30, required=False, help_text='Optional.')

    class Meta:
        model = User
        fields = ('username', 'first_name', 'last_name', 'email', 'password1', 'password2', 'company_name')

class ChamberForm(ModelForm):
    chamber_name = forms.CharField(max_length=100, required=True)

    class Meta:
        model = Chamber
        fields = ['chamber_name']

class ChamberPropertiesForm(ModelForm):
    property_name = forms.CharField(max_length=100)
    property_value = forms.CharField(max_length=100)

    class Meta:
        model = ChamberProperty
        fields = ['property_name', 'property_value']

class RecipeForm(ModelForm):
    name = forms.CharField(max_length=255)

    class Meta:
        model = Recipe
        fields = ['name']

class CustomParameterForm(ModelForm):
    parameter_name_userdef = forms.CharField(max_length=100, label="Enter Custom Name")

    class Meta:
        model = SensorParameter
        fields = ['parameter_name_userdef']

class PropertyForm(ModelForm):
    property_name = forms.CharField(max_length=100, label="Enter new name", required=True)
    property_value = forms.CharField(max_length=100, label="Enter new value", required=True)

    class Meta:
        model = RecipeProperties
        fields = ['property_name', 'property_value']

class AlgorithmSettingsForm(ModelForm):

    class Meta:
        model = AlgorithmSettings
        # fields = ['active', 'stream_algorithm', 'parameter', 'recipe', 'result_name', 'start', 'stop']
        fields = '__all__'

class SensorForm(ModelForm):

    class Meta:
        model = Sensor
        fields = ['name', 'sensor_type', 'serial_number']

class FileUploadForm(ModelForm):
    def __init__(self, user, *args, **kwargs):
        super(FileUploadForm, self).__init__(*args, **kwargs)
        customer = Customer.objects.filter(user = user)
        chambers = Chamber.objects.filter(customer=customer)
        #file_type = forms.ModelChoiceField(queryset=File_Type.objects.filter(customer=customer), empty_label="-")
        #sensor = forms.ModelChoiceField(queryset=Sensor.objects.filter(chamber__in=chambers), empty_label="-")
        chamber = forms.ModelChoiceField(queryset=chambers, empty_label="-", required=True)

    class Meta:
        model = UploadedFile
        fields = ['chamber']

class FineUploaderForm(FineUploaderUploadForm):
    #This form represents a basic request from Fine Uploader.
    #The required fields will **always** be sent, the other fields are optional
    #based on your setup.

    #Extend this if you want to add custom parameters in the body of the POST
    #request.
    #sensor = forms.ModelChoiceField(queryset=Sensor.objects.all(), empty_label="-",  required=False)
    #file_type = forms.ModelChoiceField(queryset=File_Type.objects.all(), empty_label="-",  required=False)
    chamber = forms.ModelChoiceField(queryset=Chamber.objects.all(), empty_label="-", required=True)
"""
class FileTypeForm(forms.Form) :
    file_type_name=forms.NumberInput()
    header
    is_time_absolute
    time_column
    time_zone
    relative_time_cell
    chamber_column
    chamber_properties_column
    marker_column
    run_column
    run_properties_column
    sensor_column
    frequency_column
    voltage_column
    current_column
    phase_column
    temerature_column

"""

###################################
# Define filter form for Chambers #
###################################

class ChambersFilterForm(forms.Form):

    chamber = ModelChoiceField(queryset=None, required=True, label="Chamber")
    property_name = ModelChoiceField(queryset=None,  required=False, label="Property Name")
    property_value = ModelChoiceField(queryset=None,  required=False, label="Property Value")

    def __init__(self, *args, **kwargs):
        request = kwargs.pop('request', None)
        super(ChambersFilterForm, self).__init__(*args, **kwargs)
        try:
            user = User.objects.get(username=request.user)
            customer = Customer.objects.get(user=user)
            chamber_query = Chamber.objects.filter(customer=customer)
            properties_query = ChamberProperty.objects.filter(chamber=chamber)
            self.fields['chamber'].queryset=chamber_query
            self.fields['property_name'].queryset=properties_query
            self.fields['property_name'].queryset=properties_query
        except:
            user = None